import sqlite3
import os
import asyncio
import aiohttp
import json

# Database path
db_path = os.path.expanduser('~/Dev/MCDUWorldwideDatabase.db')

# API URL and base parameters
api_url = "https://www.ngdc.noaa.gov/geomag-web/calculators/calculateDeclination"
params_template = {
    "browserRequest": "true",
    "magneticComponent": "d",
    "key": "zNEw7",
    "model": "WMM",
    "startYear": 2025,
    "startMonth": 1,
    "startDay": 29,
    "resultFormat": "json"
}

async def fetch_declination(session, vor_id, lat, lon):
    lat1 = abs(lat)
    latHem = "N" if lat >= 0 else "S"
    lon1 = abs(lon)
    lonHem = "E" if lon >= 0 else "W"
    params = {
        **params_template,
        "lat1": lat1,
        "lat1Hemisphere": latHem,
        "lon1": lon1,
        "lon1Hemisphere": lonHem
    }

    async with session.get(api_url, params=params) as resp:
        text = await resp.text()
        if resp.status == 200:
            try:
                data = json.loads(text)
                decl = data["result"][0]["declination"]
                return vor_id, decl
            except (KeyError, IndexError, json.JSONDecodeError) as e:
                print(f"[JSON parse error] {vor_id}: {e}")
        else:
            print(f"[HTTP {resp.status}] {vor_id} â€“ response was:\n{text[:200]}")
    return vor_id, None

async def main():
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    try:
        cur.execute('''
            ALTER TABLE "primary_D__base_Navaid - VHF Navaid"
            ADD COLUMN Declination REAL
        ''')
        conn.commit()
    except sqlite3.OperationalError:
        pass

    # now select both VOR and DME cols:
    cur.execute('''
        SELECT VORIdentifier,
               VORLatitude_WGS84, VORLongitude_WGS84,
               DMELatitude_WGS84, DMELongitude_WGS84
        FROM "primary_D__base_Navaid - VHF Navaid"
    ''')
    rows = cur.fetchall()
    total = len(rows)
    print(f"Total VORs: {total}")

    tasks = []
    processed = 0
    batch = 1

    async with aiohttp.ClientSession() as session:
        for vor_id, vlat, vlon, dlat, dlon in rows:
            # pick lat
            if vlat not in (None, ""):
                lat_s = vlat
            elif dlat not in (None, ""):
                lat_s = dlat
            else:
                print(f"Skipping {vor_id}: no latitude")
                processed += 1
                continue

            # pick lon
            if vlon not in (None, ""):
                lon_s = vlon
            elif dlon not in (None, ""):
                lon_s = dlon
            else:
                print(f"Skipping {vor_id}: no longitude")
                processed += 1
                continue

            try:
                lat = float(lat_s)
                lon = float(lon_s)
            except ValueError:
                print(f"Skipping {vor_id}: invalid coords")
                processed += 1
                continue

            tasks.append(fetch_declination(session, vor_id, lat, lon))

            if len(tasks) == 50:
                results = await asyncio.gather(*tasks)
                updated = 0
                for vid, decl in results:
                    processed += 1
                    if decl is not None:
                        cur.execute('''
                            UPDATE "primary_D__base_Navaid - VHF Navaid"
                               SET Declination = ?
                             WHERE VORIdentifier = ?
                        ''', (decl, vid))
                        updated += 1
                conn.commit()
                print(f"Batch {batch}: {processed}/{total} processed, {updated} updated")
                tasks.clear()
                batch += 1

        if tasks:
            results = await asyncio.gather(*tasks)
            updated = 0
            for vid, decl in results:
                processed += 1
                if decl is not None:
                    cur.execute('''
                        UPDATE "primary_D__base_Navaid - VHF Navaid"
                           SET Declination = ?
                         WHERE VORIdentifier = ?
                    ''', (decl, vid))
                    updated += 1
            conn.commit()
            print(f"Final batch {batch}: {processed}/{total} processed, {updated} updated")

    conn.close()
    print("VOR declination update completed.")

if __name__ == "__main__":
    asyncio.run(main())
